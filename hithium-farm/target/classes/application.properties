#mongo
#mongodb \u8FDE\u63A5ip:port,  \u5B9E\u4F8B\uFF1A127.x.x.1:xxxx,127.x.x.2:xxxx,127.x.x.3:xxxx
mongo.host=192.168.241.201:27017
mongo.port=27017
mongo.database=ess
mongo.username=ess
mongo.password=ess
#mongo.host=172.24.63.229:27017
#mongo.port=27017
#mongo.database=farm
#mongo.username=farm
#mongo.password=hithium.db.mongo
#mqtt
#mqtt.server=tcp://42.192.214.33:11885
mqtt.server = tcp://192.168.241.201:1883
#mqtt.server=tcp://192.168.241.151:1883
#mqtt.server=tcp://192.168.241.148:1884
#mqtt.server=tcp://192.168.241.134:1883
#mqtt.server = ssl://42.192.214.33:8883
mqtt.username=admin
mqtt.password=public
mqtt.clientid.subscriber=d4f6adccb1cd441fb33b9097c2d1e921-1
mqtt.clientid.publisher=d4f6adccb1cd441fb33b9097c2d1e921-2
#\u6E05\u9664\u4F1A\u8BDD  \u8BA2\u9605\u8005\u4E0D\u6E05\u9664 \u53D1\u5E03\u8005\u53EF\u6E05\u9664
mqtt.clean.session=true
#\u662F\u5426\u81EA\u52A8\u91CD\u8FDE \u9ED8\u8BA4\u4E0D\u91CD\u8FDE false
mqtt.auto.reconnection=true
#\u5171\u4EAB\u8BA2\u9605\u6A21\u5F0F   $local \u53EA\u5728\u672C\u8282\u70B9\u521B\u5EFA\u8BA2\u9605\u4E0E\u8DEF\u7531\u8868\uFF0C\u4E0D\u4F1A\u5728\u96C6\u7FA4\u8282\u70B9\u95F4
# $local/$share/g1/
#connected : $local/$share/g1/      disconnected $local/$share/g1/
#$queue/$ESS/+/MSG/D2S,$queue/$SYS/brokers/
#\u961F\u5217\u5171\u4EAB\u8BA2\u9605  \u8DDF \u5206\u7EC4\u5171\u4EAB\u8BA2\u9605 \u53EF\u67E5\u770B\u5173\u4E8E\u8D1F\u8F7D\u5747\u8861\u90E8\u7F72\u65B9\u6848
#mqtt.subtopic=$queue/$ESS/+/MSG/D2S,$queue/$SYS/brokers/+/clients/+/connected,$queue/$SYS/brokers/+/clients/+/disconnected
#mqtt.subtopic=$share/g1/$ESS/+/MSG/D2S,$share/g1/$SYS/brokers/+/clients/+/connected,$share/g1/$SYS/brokers/+/clients/+/disconnected
mqtt.subtopic=$ESS/+/MSG/D2S,$SYS/brokers/+/clients/+/connected,$SYS/brokers/+/clients/+/disconnected,$RDB/+/MSG/D2S
# \u672C\u5730\u5171\u4EAB\u8BA2\u9605
#mqtt.subtopic=$local/$share/g1/$ESS/+/MSG/D2S,$local/$share/g1/$SYS/brokers/+/clients/+/connected,$local/$share/g1/$SYS/brokers/+/clients/+/disconnected
mqtt.inflight=200000
mqtt.keepalive.interval=900
# \u52A8\u4F5C\u5B8C\u6210\u8D85\u65F6 \u5355\u4F4D\u6BEB\u79D2
mqtt.complete.timeout=100000
#kafka
# \u6307\u5B9Akafka \u4EE3\u7406\u5730\u5740\uFF0C\u53EF\u4EE5\u591A\u4E2A
#spring.kafka.bootstrap-servers=192.168.241.170:9092
#kafka\u53D1\u9001\u7684\u91CD\u8BD5\u6B21\u6570
spring.kafka.producer.retries=2
#kafka\u91CD\u8BD5\u4E4B\u95F4\u7684\u95F4\u9694 \u9ED8\u8BA4100ms  \u4F30\u7B97\u4E00\u4E0B\u53EF\u80FD\u7684\u5F02\u5E38\u6062\u590D\u65F6\u95F4\uFF0C\u8FD9\u6837\u53EF\u4EE5\u8BBE\u5B9A\u603B\u7684\u91CD\u8BD5\u65F6\u95F4\u5927\u4E8E\u8FD9\u4E2A\u5F02\u5E38\u6062\u590D\u65F6\u95F4\uFF0C\u4EE5\u6B64\u6765\u907F\u514D\u751F\u4EA7\u8005\u8FC7\u65E9\u5730\u653E\u5F03\u91CD\u8BD5
spring.kafka.producer.retries.backoff.ms=1000
#\u8FD9\u4E2A\u914D\u7F6E\u4FDD\u8BC1\u4E86\uFF0Cfollwer\u540C\u6B65\u5B8C\u6210\u540E\uFF0C\u624D\u8BA4\u4E3A\u6D88\u606F\u53D1\u9001\u6210\u529F
#spring.kafka.producer.acks=all
# \u6BCF\u6B21\u6279\u91CF\u53D1\u9001\u6D88\u606F\u7684\u6570\u91CF \u8BBE\u5907\u4E0A\u62A5\u4E00\u6761 400\u5B57\u8282 \u8BBE\u7F6E\u4E3A100000  250\u53F0\u8BBE\u5907 2500\u53F0\u8BBE\u5907\u540C\u65F6\u4E0A\u62A516384
spring.kafka.producer.batch-size=100000
#\u9ED8\u8BA4\u4E3A0  \u65E0\u5EF6\u8FDF  linger.ms\u51B3\u5B9A\u4E86\u4F60\u7684\u6D88\u606F\u4E00\u65E6\u5199\u5165\u4E00\u4E2ABatch\uFF0C\u6700\u591A\u7B49\u5F85\u8FD9\u4E48\u591A\u65F6\u95F4,\u5230\u65F6\u95F4\u540E\u4F1A\u5C06\u6570\u636E\u4E00\u8D77\u53D1\u9001\u51FA\u53BB
#\u6D4B\u8BD510S  10S\u540E\u53D1\u9001\u5230kakfa        \u8BBE\u7F6E\u5EF6\u8FDF0.1S
spring.kafka.producer.properties.linger.ms=100
spring.kafka.producer.buffer-memory=33554432
#\u6269\u5927\u4E24\u500D
#spring.kafka.producer.buffer-memory=67108864
kafka.send.topic=t_1
#max.request.size  
spring.kafka.producer.properties.max.request.size=10485760
#request.timeout.ms = 30000
spring.kafka.producer.properties.request.timeout.ms=60000

#redis \u914D\u7F6E
#\u8BBF\u95EE\u5730\u5740 WEB\u7AEF\u5730\u5740
redis.host=192.168.241.170
##\u8BBF\u95EE\u7AEF\u53E3
redis.port=6379
#\u6CE8\u610F\uFF0C\u5982\u679C\u6CA1\u6709password\uFF0C\u6B64\u5904\u4E0D\u8BBE\u7F6E\u503C\uFF0C\u4F46\u8FD9\u4E00\u9879\u8981\u4FDD\u7559
redis.password=redis.hithium.pwd
#\u6700\u5927\u7A7A\u95F2\u6570\uFF0C\u6570\u636E\u5E93\u8FDE\u63A5\u7684\u6700\u5927\u7A7A\u95F2\u65F6\u95F4\u3002\u8D85\u8FC7\u7A7A\u95F2\u65F6\u95F4\uFF0C\u6570\u636E\u5E93\u8FDE\u63A5\u5C06\u88AB\u6807\u8BB0\u4E3A\u4E0D\u53EF\u7528\uFF0C\u7136\u540E\u88AB\u91CA\u653E\u3002\u8BBE\u4E3A0\u8868\u793A\u65E0\u9650\u5236\u3002
redis.maxIdle=100
#\u6700\u5C0F\u7A7A\u95F2\u6570
redis.minIdle=50
#\u8FDE\u63A5\u6C60\u7684\u6700\u5927\u6570\u636E\u5E93\u8FDE\u63A5\u6570\u3002\u8BBE\u4E3A0\u8868\u793A\u65E0\u9650\u5236
redis.maxActive=100
#\u6700\u5927\u5EFA\u7ACB\u8FDE\u63A5\u7B49\u5F85\u65F6\u95F4\u3002\u5982\u679C\u8D85\u8FC7\u6B64\u65F6\u95F4\u5C06\u63A5\u5230\u5F02\u5E38\u3002\u8BBE\u4E3A-1\u8868\u793A\u65E0\u9650\u5236\u3002
redis.maxWait=100000
#\u5728borrow\u4E00\u4E2Ajedis\u5B9E\u4F8B\u65F6\uFF0C\u662F\u5426\u63D0\u524D\u8FDB\u884Calidate\u64CD\u4F5C\uFF1B\u5982\u679C\u4E3Atrue\uFF0C\u5219\u5F97\u5230\u7684jedis\u5B9E\u4F8B\u5747\u662F\u53EF\u7528\u7684\uFF1B
redis.testOnBorrow=false
#\u94FE\u63A5\u8D85\u65F6\u65F6\u95F4
redis.timeout=100000
#redis.timeout=1000
#\u51CC\u666830\u5206\u65F6\u5019\u8FDB\u884C\u544A\u8B66\u65E5\u5FD7\u4FEE\u590D\u66F4\u65B0
#untrans.report.interval=0 30 0 * * ?
untrans.report.interval=0 30 0 * * ?
#\u4FEE\u6539\u544A\u8B66\u65E5\u5FD7\u72B6\u6001\u5F00\u59CB\u65F6\u95F4  \u8DDD\u79BB\u73B0\u5728\u65F6\u95F4\u591A\u5C11\u5929  \u751F\u4EA7\u4E0A\u4E3A2\u5929
alter.breakdownlog.status.start=30
##\u4FEE\u6539\u544A\u8B66\u65E5\u5FD7\u72B6\u6001\u7ED3\u675F\u65F6\u95F4  \u8DDD\u79BB\u73B0\u5728\u65F6\u95F4\u591A\u5C11\u5929  \u751F\u4EA7\u4E0A\u4E3A1\u5929
alter.breakdownlog.status.end=1
#1\u79D2\u949F\u53D1\u9001kafka\u4E00\u6B21
energy.untrans.report.interval=0/1 * * * * ?
#\u662F\u5426\u5F00\u542Fredis\u6570\u636E\u7F13\u5B58
redis.data.cache.switch=false
# \u662F\u5426\u5F00\u542Fkafka\u53D1\u751F
send.to.kafka=false
###########################################kafka about config #######################################################
spring.kafka.bootstrap-servers=192.168.241.170:9092,192.168.241.168:9092,192.168.241.167:9092
##########################producer about config##############################
#spring.kafka.producer.acks=1
#spring.kafka.producer.batch-size=16384
#spring.kafka.producer.retries=0
#spring.kafka.producer.buffer-memory=33554432
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#########################consumer about config##############################
#\u662F\u5426\u5F00\u542F\u81EA\u52A8\u63D0\u4EA4
#spring.kafka.consumer.enable-auto-commit=false
#spring.kafka.listener.ack-mode=manual
#spring.kafka.consumer.group-id=test-consumer
#spring.kafka.consumer.auto-commit-interval=100
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD \uFFFD\uFFFD\uFFFD\uFFFD
# \u04BB\uFFFD\uFFFDpoll\uFFFD\uFFFD\u0DF5\uFFFD\u0635\u013C\uFFFD\u00BC\uFFFD\uFFFD \uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u04BB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u05B5\uFFFD\u0177\uFFFD\uFFFD\uFFFD \uFFFD\u043F\uFFFD\uFFFD\u0737\uFFFD\uFFFD\uFFFD\u04BB\uFFFD\uFFFD
#spring.kafka.consumer.max-poll-records=10
#\uFFFD\uFFFD\uFFFD\u00F2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0421\uFFFD\u06BB\uFFFD\uFFFD\uFFFD\uFFFDTopic\uFFFD\u0137\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD  \uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u1D7C\uFFFD\uFFFD\uFFFD\u07F3\u033F\uFFFD\uFFFD\uFFFD
#spring.kafka.listener.concurrency=
production.equipment.devicename=clld3w7tdxjhvuhf6gzn60whffuy0hyj

